<?php

/**
 * @file
 * Contains install and update functions for CapitalCamp.
 */

use Drupal\block\Entity\Block;
use Drupal\taxonomy\Entity\Term;
use Drupal\menu_link_content\Entity\MenuLinkContent;
use Drupal\user\Entity\Role;
use Drupal\node\Entity\Node;
use Drupal\media\Entity\Media;
use Drupal\Core\Entity\EntityInterface;

/**
 * DCG-107: Add terms to sponsorship level vocabulary.
 */
function capitalcamp_glue_update_8001() {
  $sponsorshipLevelTerms = [
    'Core',
    'Coffee',
    'Contributor',
    'Mentor',
    'Sprinter',
    'Exhibitor',
    'Supporter',
    'Personal',
    'Training',
  ];
  foreach ($sponsorshipLevelTerms as $sponsorshipLevelTerm) {
    Term::create([
      'name' => $sponsorshipLevelTerm,
      'vid' => 'sponsorship_level',
    ])->save();
  }
}

/**
 * Update menu block to the lastest.
 */
function capitalcamp_glue_update_8002() {
  $block = Block::load('dgcnav');
  if ($block) {
    $block->delete();
  }
}

/**
 * Add user registation and submission links.
 */
function capitalcamp_glue_update_8003() {
  $registerLink = MenuLinkContent::create([
    'title' => 'Submit a Session',
    'link' => ['uri' => 'internal:/node/add/session?destination=/user/'],
    'parent' => 'menu_link_content:cfde32b4-ff81-4a70-a608-5faf124c12ee',
    'menu_name' => 'main',
    'expanded' => FALSE,
    'weight' => -46,
  ]);
  $registerLink->save();

  $registerLink = MenuLinkContent::create([
    'title' => 'Register to Attend',
    'link' => ['uri' => 'internal:/form/registration?destination=/user/'],
    'parent' => 'menu_link_content:cfde32b4-ff81-4a70-a608-5faf124c12ee',
    'menu_name' => 'main',
    'expanded' => FALSE,
    'weight' => -45,
  ]);
  $registerLink->save();
}

/**
 * Add 2015 and 2016 archive links to footer menu.
 */
function capitalcamp_glue_update_8007() {
  $archive2016Link = MenuLinkContent::create([
    'title' => '2016',
    'link' => ['uri' => 'https://www.drupalgovcon.org/drupal-govcon-2016/index.html'],
    'parent' => '',
    'menu_name' => 'footer',
    'expanded' => FALSE,
    'weight' => 0,
  ]);
  $archive2016Link->save();

  $archive2015Link = MenuLinkContent::create([
    'title' => '2015',
    'link' => ['uri' => 'https://www.drupalgovcon.org/drupal-govcon-2015/index.html'],
    'parent' => '',
    'menu_name' => 'footer',
    'expanded' => FALSE,
    'weight' => 0,
  ]);
  $archive2015Link->save();
}

/**
 * DCG-104: Add terms to sponsorship level vocabulary.
 */
function capitalcamp_glue_update_8004() {
  $sessionTracks = [
    'Site Building',
    'Front End',
    'Back End',
    'DevOps',
    'Business (Gov, Non-Profit, Commercial)',
    'End Users / Content Management / Project Management',
    'Design/UX',
    'Community',
  ];
  foreach ($sessionTracks as $sessionTrack) {
    Term::create([
      'name' => $sessionTrack,
      'vid' => 'session_track',
    ])->save();
  }
}

/**
 * Delete all extra not required roles created by lightning.
 */
function capitalcamp_glue_update_8005() {
  $roles = [
    'session_reviewer',
    'session_creator',
    'sponsor_reviewer',
    'sponsor_creator',
    'media_manager',
    'media_creator',
    'landing_page_reviewer',
    'landing_page_creator',
    'basic_page_reviewer',
    'basic_page_creator',
    'layout_manager',

  ];
  foreach ($roles as $role) {
    $role = Role::load($role);
    if ($role) {
      $role->delete();
    }
  }
}

/**
 * Populates the <> Vocabulary with 2017 Role Terms.
 */
function capitalcamp_glue_update_8006() {
  $vocabulary = "conference_role";
  $terms = [
    "Organizer-2017",
    "Presenter-2017",
    "Sponsor-2017",
    "Volunteer-2017",
  ];

  foreach ($terms as $name) {
    // Check whether the term already exists.
    $result = \Drupal::entityQuery('taxonomy_term')->condition('vid', $vocabulary)->condition('name', $name)->execute();
    if (empty($result)) {
      $term = Term::create(['vid' => $vocabulary, 'name' => $name]);
      $term->save();
    }
  }
}

/**
 * DCG-153: Add terms to Conference Year vocabulary.
 */
function capitalcamp_glue_update_8008() {
  $vocabulary = "conference_year";
  $terms = [
    '2017',
    '2018',
  ];

  foreach ($terms as $name) {
    // Check whether the term already exists.
    $result = \Drupal::entityQuery('taxonomy_term')->condition('vid', $vocabulary)->condition('name', $name)->execute();
    if (empty($result)) {
      $term = Term::create(['vid' => $vocabulary, 'name' => $name]);
      $term->save();
    }
  }
}

/**
 * Uninstalling scheduled_updates.
 */
function capitalcamp_glue_update_8009() {
  \Drupal::service('module_installer')->uninstall(['scheduled_updates']);
}

/**
 * Removing unneeded modules.
 */
function capitalcamp_glue_update_8011() {
  \Drupal::service('module_installer')->uninstall(['features']);
}

/**
 * Removing unneeded modules.
 */
function capitalcamp_glue_update_8012() {
  \Drupal::service('module_installer')->uninstall(['page_manager']);
  \Drupal::service('module_installer')->uninstall(['contribute']);
}

/**
 * Removing unneeded modules.
 */
function capitalcamp_glue_update_8013() {
  \Drupal::service('module_installer')->uninstall(['sponsors']);
  \Drupal::service('module_installer')->uninstall(['session']);
  \Drupal::service('module_installer')->uninstall(['contribute']);
}

/**
 * Removing unneeded modules.
 */
function capitalcamp_glue_update_8014() {
  \Drupal::service('module_installer')->uninstall(['features']);
  \Drupal::service('module_installer')->uninstall(['entity']);
}

/**
 * Deleting old views.
 */
function capitalcamp_glue_update_8015() {
  \Drupal::configFactory()->getEditable('views.view.accepted_sessions')->delete();
  \Drupal::configFactory()->getEditable('views.view.new_proposed_sessions')->delete();
}

/**
 * DCG-167: Add terms to rooms vocabulary.
 */
function capitalcamp_glue_update_8016() {
  $sponsorshipLevelTerms = [
    'Auditorium',
    'Balcony A',
    'Balcony B',
    'Balcony C',
    'Room A',
    'Room B',
    'Room C1/C2',
    'Room D',
    'Room E',
    'Room E1/E2',
    'Room F1/F2',
    'Room G1/G2',
    'Room H',
    'Room J',
  ];
  foreach ($sponsorshipLevelTerms as $sponsorshipLevelTerm) {
    Term::create([
      'name' => $sponsorshipLevelTerm,
      'vid' => 'rooms',
    ])->save();
  }
}

/**
 * Fix Flag Config re: D.O 3099003.
 */
function capitalcamp_glue_update_8020() {
  $config_factory = \Drupal::configFactory();
  $flags = [
    'system.action.flag_action.check_in_status.flag',
    'system.action.flag_action.check_in_status.unflag',
    'system.action.flag_action.session_schedule.flag',
    'system.action.flag_action.session_schedule.unflag',
  ];

  foreach ($flags as $flag) {
    $names = explode('.', $flag);
    $config = $config_factory->getEditable($flag);
    $config->set('plugin', "flag_action:" . $names[3] . "_flag");
    $config->save(TRUE);
  }
}

/**
 * DCG-107: Add terms to video type vocabulary.
 */
function capitalcamp_glue_update_9000() {
  $videoTerms = [
    'Session Recording',
    'DGC Site Video',
  ];
  foreach ($videoTerms as $videoTerm) {
    Term::create([
      'name' => $videoTerm,
      'vid' => 'video_type',
    ])->save();
  }
}

/**
 * Migrates Session Videos into Media Remote Video.
 */
function capitalcamp_glue_update_9005() {
  $term = \Drupal::service('entity_type.manager')->getStorage('taxonomy_term');
  $tid = $term->getQuery()
    ->condition('vid', 'video_type')
    ->condition('name', 'Session Recording')
    ->accessCheck(FALSE)
    ->execute();
  $tid = key($tid);
  $node = \Drupal::service('entity_type.manager')->getStorage('node');
  $node_results = $node->getQuery()
    ->condition('type', 'session')
    ->condition('field_video_embed', NULL, "IS NOT NULL")
    ->accessCheck(FALSE)
    ->execute();
  if (!empty($node_results)) {
    foreach ($node_results as $node_result) {
      /** @var \Drupal\Core\Entity\EntityBase|Drupal\Core\Entity\EntityInterface $session */
      $session = Node::load($node_result);
      $url = $session->field_video_embed->value;
      $media_results = _find_video($url);
      if ($media_results) {
        _update_session($session, $media_results);
      }
      else {
        /** @var Drupal\media\Entity\Media $video */
        Media::create([
          'field_video_type' => $tid,
          'uid' => '1',
          'field_media_oembed_video' => $url,
          'title' => $session->label(),
          'bundle' => 'remote_video',
        ])->save();
        $media_results = _find_video($url);
        _update_session($session, $media_results);
      }
    }
  }
}

/**
 * Migrates Session Tracks.
 */
function capitalcamp_glue_update_9006() {
  $terms = [
    0 => [
      'parent' => 156,
      'children' => [46, 66, 381],
    ],
    1 => [
      'parent' => 311,
      'children' => [51, 56, 176],
    ],
    2 => [
      'parent' => 171,
      'children' => [61],
    ],
    3 => [
      'parent' => 161,
      'children' => [81],
    ],
    4 => [
      'parent' => 166,
      'children' => [91, 386],
    ],
    5 => [
      'parent' => 306,
      'children' => [181],
    ],
  ];
  foreach ($terms as $term) {
    $nids = _get_content_by_term($term['children']);
    $nodes = Node::loadMultiple($nids);
    foreach ($nodes as $node) {
      $node->set('field_session_track', $term['parent']);
      $node->save();
    }
    foreach ($term['children'] as $child) {
      $delete = Term::load($child);
      $delete->delete();
    }
  }
}

/**
 * A helper function for finding remove video media.
 *
 * @param string $url
 *   The Remote Video URL.
 *
 * @return array
 *   The resulting media entity(ies).
 */
function _find_video($url) {
  $media = \Drupal::service('entity_type.manager')->getStorage('media');
  return $media->getQuery()
    ->condition('bundle', 'remote_video')
    ->condition('field_media_oembed_video', $url)
    ->accessCheck(FALSE)
    ->execute();
}

/**
 * A helper function for updating session nodes.
 *
 * @param \Drupal\Core\Entity\EntityBase|Drupal\Core\Entity\EntityInterface $session
 *   The session node entity.
 * @param array $video_results
 *   The remote videos that have been found.
 */
function _update_session(EntityInterface $session, array $video_results) {
  /** @var \Drupal\Core\Entity\EntityBase|Drupal\Core\Entity\EntityInterface $session */
  $session->set('field_video', $video_results[key($video_results)]);
  $session->set('field_video_embed', NULL);
  $session->save();
}

/**
 * A helper function to load all nodes tagged with any of the provided tids.
 *
 * @param array $tids
 *   An array of term ids.
 *
 * @return array
 *   Returns an array of node ids.
 */
function _get_content_by_term(array $tids) {
  $nids = [];
  foreach ($tids as $tid) {
    $node = \Drupal::service('entity_type.manager')->getStorage('node');
    $node_results = $node->getQuery()
      ->condition('type', 'session')
      ->condition('field_session_track', $tid)
      ->accessCheck(FALSE)
      ->execute();
    foreach ($node_results as $key => $value) {
      $nids[$key] = $value;
    }
  }
  return $nids;
}
